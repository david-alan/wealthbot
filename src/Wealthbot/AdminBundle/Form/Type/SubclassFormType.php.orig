<?php
/**
 * Created by JetBrains PhpStorm.
 * User: maksim
 * Date: 09.04.13
 * Time: 15:14
 * To change this template use File | Settings | File Templates.
 */
namespace Wealthbot\AdminBundle\Form\Type;

use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\EntityManager;
use Wealthbot\AdminBundle\Entity\Subclass;
use Wealthbot\AdminBundle\Repository\SubclassRepository;
use Wealthbot\RiaBundle\Entity\RiaCompanyInformation;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\Form\FormEvent;
use Symfony\Component\Form\FormEvents;
use Symfony\Component\OptionsResolver\OptionsResolverInterface;
use Symfony\Component\Validator\Constraints\Range;

class SubclassFormType extends AbstractType
{
    private $user;

    private $em;

    private $allSubclasses;

    public function __construct($user, EntityManager $em, $allSubclasses = null)
    {
        $this->user = $user;
        $this->em = $em;
        $this->allSubclasses = $allSubclasses;
    }

    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $user = $this->user;
        $em = $this->em;
        $allSubclasses = $this->allSubclasses;


        $builder
            ->add('name', 'text', array('label' => 'Subclass'))
            ->add('expected_performance', 'text', array('label' => 'Expected Performance (%)'))
            ->add('accountType', 'entity', array(
                'class' => 'Wealthbot\RiaBundle\Entity\SubclassAccountType',
                'empty_value' => 'Choose an option'
            ))
        ;

        if ($user->hasRole('ROLE_RIA')) {
            if ($user->getRiaCompanyInformation()->isRebalancedFrequencyToleranceBand()) {
                $builder->add('tolerance_band', 'number', array('precision' => 2));
            }

//            if ($user->getRiaCompanyInformation()->isShowSubclassPriority()) {
<<<<<<< HEAD
              if (false) {
=======
            if (false) {
>>>>>>> develop
                $factory = $builder->getFormFactory();
                $refreshPriority = function($form, $choices) use ($factory, $em) {
                    $form->add($factory->createNamed('priority', 'choice', null, array(
                        'choices' => $choices,
                    )));
                };

                $builder->addEventListener(FormEvents::PRE_SET_DATA, function(FormEvent $event) use($refreshPriority, $user, $em) {
                    $form = $event->getForm();
                    $data = $event->getData();

                    if($data === null) return;

                    if($data instanceof Subclass) {
                        /** @var $subclassRepo SubclassRepository */
                        $subclassRepo = $em->getRepository('WealthbotAdminBundle:Subclass');
                        $subclasses = $subclassRepo->findByOwnerIdAndAccountTypeId($user->getId(), $data->getAccountTypeId());
                        $choices = range(0, count($subclasses));
                        unset($choices[0]);

                        $refreshPriority($form, $choices);
                    }
                });

                $builder->addEventListener(FormEvents::PRE_BIND, function(FormEvent $event) use($refreshPriority, $allSubclasses, $user) {
                    $form = $event->getForm();
                    $data = $event->getData();

                    if($data === null) return;

                    $maxChoice = 0;
                    foreach ($allSubclasses as $subclass) {
                        if ($data['accountType'] == $subclass['accountType']) {
                            $maxChoice++;
                        }
                    }

                    $choices = range(0, $maxChoice);
                    unset($choices[0]);

                    $refreshPriority($form, $choices);
                });
            }
        }


        $builder->addEventListener(FormEvents::BIND, function(FormEvent $event) use ($user, $em){
            $data = $event->getData();

            if ($data === null) return;

            // Validate unique subclass name for strategy


            if (!$data->getExpectedPerformance()) {
                $data->setExpectedPerformance(0);
            }

            if ($data instanceof Subclass && $user->hasRole('ROLE_RIA')) {
                $data->setOwner($user);
            }
        });
    }

    public function setDefaultOptions(OptionsResolverInterface $resolver)
    {
        $resolver->setDefaults(array(
            'data_class' => 'Wealthbot\AdminBundle\Entity\Subclass'
        ));
    }

    public function getName()
    {
        return 'subclass';
    }
}